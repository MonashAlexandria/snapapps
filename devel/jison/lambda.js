/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lambda = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"lambda":3,"expression":4,"END_OF_EXPRESSION":5,"function_call":6,"IDENTIFIER":7,"(":8,"argument_list":9,")":10,",":11,"unfinished_string":12,"STRING_START":13,"STRING_ANYTHING":14,"STRING_UNICODE_ESCAPE_START":15,"STRING_UNICODE_ESCAPE_END":16,"string":17,"STRING_END":18,"-":19,"+":20,"*":21,"^":22,">":23,"<":24,"<=":25,">=":26,"==":27,"!=":28,"AND":29,"OR":30,"XOR":31,"?":32,":":33,"NOT":34,"[":35,"]":36,"NUMBER":37,"TRUE":38,"FALSE":39,"PI":40,"E":41,"$accept":0,"$end":1},
terminals_: {2:"error",5:"END_OF_EXPRESSION",7:"IDENTIFIER",8:"(",10:")",11:",",13:"STRING_START",14:"STRING_ANYTHING",15:"STRING_UNICODE_ESCAPE_START",16:"STRING_UNICODE_ESCAPE_END",18:"STRING_END",19:"-",20:"+",21:"*",22:"^",23:">",24:"<",25:"<=",26:">=",27:"==",28:"!=",29:"AND",30:"OR",31:"XOR",32:"?",33:":",34:"NOT",35:"[",36:"]",37:"NUMBER",38:"TRUE",39:"FALSE",40:"PI",41:"E"},
productions_: [0,[3,2],[6,4],[9,1],[9,3],[12,1],[12,2],[12,3],[17,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,5],[4,2],[4,4],[4,1],[4,3],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
          return $$[$0-1];
      
break;
case 2:
          var functions = window[SCRIBBLE_LAMBDA_FUNCTIONS_NAME];
          var argCount = functions[$$[$0-3]].length - SCRIBBLE_LAMBDA_PREFIX_ARGS_COUNT;
          if ($$[$0-3] in functions)
          {
              if (argCount != $$[$0-1].num_args)
              {
                  throw { name: "Wrong number of arguments to function", message: "Function named \"" + lambda_htmlEntities($$[$0-3]) + "\" expects " + argCount + " argument(s), given " + $$[$0-1].num_args + "."};
              }
              this.$ = SCRIBBLE_LAMBDA_FUNCTIONS_NAME + '["' + lambda_addslashes($$[$0-3]) + '"]' + '(' + SCRIBBLE_LAMBDA_PREFIX_ARGS + $$[$0-1].arg_string + ')';
          }
          else
              throw { name: "Invalid function", message: "No <b>function</b> named \"" + lambda_htmlEntities($$[$0-3]) + "\" exists." };
      
break;
case 3: this.$ = { arg_string: "(" + $$[$0] + ")", num_args: 1 } 
break;
case 4:
        $$[$0-2].arg_string += ",(" + $$[$0] + ")";
        $$[$0-2].num_args++;
        this.$ = $$[$0-2]; 
    
break;
case 5:
         this.$ = "\"";
      
break;
case 6:
          this.$ = $$[$0-1] + lambda_addslashes($$[$0]); //Escape the character if required
      
break;
case 7:
          this.$ = $$[$0-2] + "\\x" + $$[$0]; //Unicode escape
      
break;
case 8:
          this.$ = $$[$0-1] + "\"";
      
break;
case 9: this.$ = "(-(" + $$[$0]  + "))" 
break;
case 10: this.$ = "((" + $$[$0-2] + ") + (" + $$[$0] + "))" 
break;
case 11: this.$ = "((" + $$[$0-2] + ") - (" + $$[$0] + "))" 
break;
case 12: this.$ = "((" + $$[$0-2] + ") * (" + $$[$0] + "))" 
break;
case 13: this.$ = "Math.pow((" + $$[$0-2] + "),(" + $$[$0] +"))" 
break;
case 14: this.$ = "((" + $$[$0-2] + ") > (" + $$[$0] + "))" 
break;
case 15: this.$ = "((" + $$[$0-2] + ") < (" + $$[$0] + "))" 
break;
case 16: this.$ = "((" + $$[$0-2] + ") <= (" + $$[$0] + "))" 
break;
case 17: this.$ = "((" + $$[$0-2] + ") >= (" + $$[$0] + "))" 
break;
case 18: this.$ = "((" + $$[$0-2] + ") == (" + $$[$0] + "))" 
break;
case 19: this.$ = "((" + $$[$0-2] + ") != (" + $$[$0] + "))" 
break;
case 20: this.$ = "((" + $$[$0-2] + ") && (" + $$[$0] + "))" 
break;
case 21: this.$ = "((" + $$[$0-2] + ") || (" + $$[$0] + "))" 
break;
case 22: this.$ = "((" + $$[$0-2] + ") != (" + $$[$0] + "))" 
break;
case 23: this.$ = "((" + $$[$0-4] + ") ? (" + $$[$0-2] + ") : (" + $$[$0] + "))" 
break;
case 24: this.$ = "!(" + $$[$0]  + ")" 
break;
case 25: this.$ = SCRIBBLE_LAMBDA_GETLIST_NAME + "(" + SCRIBBLE_LAMBDA_PREFIX_ARGS + "\"" + lambda_addslashes($$[$0-3]) + "\", (" + $$[$0-1] +"))" 
break;
case 26: this.$ = SCRIBBLE_LAMBDA_GETVAR_NAME + "(" + SCRIBBLE_LAMBDA_PREFIX_ARGS + "\"" + lambda_addslashes($$[$0]) + "\")" 
break;
case 27: this.$ = "(" + $$[$0-1]  + ")" 
break;
case 28: this.$ = $$[$0] 
break;
case 29: this.$ = "true" 
break;
case 30: this.$ = "false" 
break;
case 31: this.$ = "Math.PI" 
break;
case 32: this.$ = "Math.E" 
break;
case 33: this.$ = $$[$0] 
break;
case 34: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{1:[3]},{5:[1,16],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30]},{4:31,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:32,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{5:[2,26],8:[1,34],10:[2,26],11:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],35:[1,33],36:[2,26]},{4:35,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{5:[2,28],10:[2,28],11:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],36:[2,28]},{5:[2,29],10:[2,29],11:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],36:[2,29]},{5:[2,30],10:[2,30],11:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],36:[2,30]},{5:[2,31],10:[2,31],11:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],36:[2,31]},{5:[2,32],10:[2,32],11:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],36:[2,32]},{5:[2,33],10:[2,33],11:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],36:[2,33]},{5:[2,34],10:[2,34],11:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],36:[2,34]},{14:[1,37],15:[1,38],18:[1,36]},{14:[2,5],15:[2,5],18:[2,5]},{1:[2,1]},{4:39,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:40,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:41,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:42,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:43,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:44,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:45,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:46,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:47,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:48,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:49,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:50,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:51,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:52,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{5:[2,9],10:[2,9],11:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[1,30],33:[2,9],36:[2,9]},{5:[2,24],10:[2,24],11:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[1,30],33:[2,24],36:[2,24]},{4:53,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{4:55,6:12,7:[1,5],8:[1,6],9:54,12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{10:[1,56],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30]},{5:[2,8],10:[2,8],11:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],36:[2,8]},{14:[2,6],15:[2,6],18:[2,6]},{16:[1,57]},{5:[2,10],10:[2,10],11:[2,10],19:[2,10],20:[2,10],21:[1,19],22:[1,20],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[1,30],33:[2,10],36:[2,10]},{5:[2,11],10:[2,11],11:[2,11],19:[2,11],20:[2,11],21:[1,19],22:[1,20],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[1,30],33:[2,11],36:[2,11]},{5:[2,12],10:[2,12],11:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[1,20],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[1,30],33:[2,12],36:[2,12]},{5:[2,13],10:[2,13],11:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[1,30],33:[2,13],36:[2,13]},{5:[2,14],10:[2,14],11:[2,14],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,14],24:[2,14],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[2,14],30:[2,14],31:[2,14],32:[1,30],33:[2,14],36:[2,14]},{5:[2,15],10:[2,15],11:[2,15],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,15],24:[2,15],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[2,15],30:[2,15],31:[2,15],32:[1,30],33:[2,15],36:[2,15]},{5:[2,16],10:[2,16],11:[2,16],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[1,25],28:[1,26],29:[2,16],30:[2,16],31:[2,16],32:[1,30],33:[2,16],36:[2,16]},{5:[2,17],10:[2,17],11:[2,17],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[1,25],28:[1,26],29:[2,17],30:[2,17],31:[2,17],32:[1,30],33:[2,17],36:[2,17]},{5:[2,18],10:[2,18],11:[2,18],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[1,30],33:[2,18],36:[2,18]},{5:[2,19],10:[2,19],11:[2,19],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[1,30],33:[2,19],36:[2,19]},{5:[2,20],10:[2,20],11:[2,20],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[2,20],30:[2,20],31:[2,20],32:[1,30],33:[2,20],36:[2,20]},{5:[2,21],10:[2,21],11:[2,21],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[2,21],31:[2,21],32:[1,30],33:[2,21],36:[2,21]},{5:[2,22],10:[2,22],11:[2,22],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[2,22],32:[1,30],33:[2,22],36:[2,22]},{19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30],33:[1,58]},{19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30],36:[1,59]},{10:[1,60],11:[1,61]},{10:[2,3],11:[2,3],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30]},{5:[2,27],10:[2,27],11:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],36:[2,27]},{14:[2,7],15:[2,7],18:[2,7]},{4:62,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{5:[2,25],10:[2,25],11:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],36:[2,25]},{5:[2,2],10:[2,2],11:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],28:[2,2],29:[2,2],30:[2,2],31:[2,2],32:[2,2],33:[2,2],36:[2,2]},{4:63,6:12,7:[1,5],8:[1,6],12:14,13:[1,15],17:13,19:[1,3],34:[1,4],37:[1,7],38:[1,8],39:[1,9],40:[1,10],41:[1,11]},{5:[2,23],10:[2,23],11:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],33:[2,23],36:[2,23]},{10:[2,4],11:[2,4],19:[1,18],20:[1,17],21:[1,19],22:[1,20],23:[1,21],24:[1,22],25:[1,23],26:[1,24],27:[1,25],28:[1,26],29:[1,27],30:[1,28],31:[1,29],32:[1,30]}],
defaultActions: {16:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    //From http://stackoverflow.com/questions/770523/escaping-strings-in-javascript
    function lambda_addslashes(str) {
        return (str + '').replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
    }
    function lambda_htmlEntities(str) {
        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin("string"); return "STRING_START"; 
break;
case 1: this.begin("string_escaped"); 
break;
case 2: this.popState(); return "STRING_ANYTHING"; 
break;
case 3: this.popState(); return "STRING_ANYTHING"; 
break;
case 4: this.popState(); this.begin("string_unicode_escape"); return "STRING_UNICODE_ESCAPE_START"; 
break;
case 5: this.popState(); return "STRING_UNICODE_ESCAPE_END"; 
break;
case 6: this.popState(); return "STRING_END"; 
break;
case 7:return "STRING_ANYTHING"
break;
case 8:/* skip whitespace */
break;
case 9:return 37
break;
case 10:return 21
break;
case 11:return '/'
break;
case 12:return 19
break;
case 13:return 20
break;
case 14:return 23
break;
case 15:return 24
break;
case 16:return 22
break;
case 17:return 8
break;
case 18:return 10
break;
case 19:return 35
break;
case 20:return 36
break;
case 21:return 11
break;
case 22:return 25
break;
case 23:return 26
break;
case 24:return 25
break;
case 25:return 26
break;
case 26:return 27
break;
case 27:return 27
break;
case 28:return 28
break;
case 29:return 28
break;
case 30:return 30
break;
case 31:return 30
break;
case 32:return 30
break;
case 33:return 29
break;
case 34:return 29
break;
case 35:return 29
break;
case 36:return 34
break;
case 37:return 34
break;
case 38:return 31
break;
case 39:return 32
break;
case 40:return 33
break;
case 41:return 40
break;
case 42:return 41
break;
case 43:return 5
break;
case 44:return 38
break;
case 45:return 39
break;
case 46:return 7
break;
case 47:return 'INVALID'
break;
}
},
rules: [/^(?:")/,/^(?:\\)/,/^(?:\\)/,/^(?:")/,/^(?:x\b)/,/^(?:[0-9a-fA-F]{4})/,/^(?:")/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:>)/,/^(?:<)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:<=)/,/^(?:>=)/,/^(?:=<)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:=!)/,/^(?:[oO][rR])/,/^(?:\|)/,/^(?:\|\|)/,/^(?:[aA][nN][dD])/,/^(?:&)/,/^(?:&&)/,/^(?:[nN][oO][tT])/,/^(?:!)/,/^(?:[xX][oO][rR])/,/^(?:\?)/,/^(?::)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:[Tt][Rr][Uu][Ee])/,/^(?:[Ff][Aa][Ll][Ss][Ee])/,/^(?:[a-zA-Z_]+[a-zA-Z_0-9]*\b)/,/^(?:.)/],
conditions: {"string_unicode_escape":{"rules":[5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true},"string_escaped":{"rules":[2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true},"string":{"rules":[1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true},"INITIAL":{"rules":[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lambda;
exports.Parser = lambda.Parser;
exports.parse = function () { return lambda.parse.apply(lambda, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}